openapi: 3.0.3
info:
  description: Nut OAuth API
  version: 0.0.1
  title: Nut OAuth API

servers:
- url: /oauth

paths:
  /health:
    get:
      summary: Service Health Status
      operationId: controllers.oauth.health
      responses:
        '200':
          $ref: '#/components/responses/Health'
        default:
          $ref: '#/components/responses/Error'

  /authorize:
    get:
      summary: To be get authorization code
      operationId: controllers.oauth.authorize
      parameters:
        - $ref: '#/components/parameters/client_id'
        - $ref: '#/components/parameters/response_type'
        - $ref: '#/components/parameters/redirect_uri'
        - $ref: '#/components/parameters/scope'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/code_challenge'
        - $ref: '#/components/parameters/code_challenge_method'
      responses:
        '200':
          description: success
        default:
          $ref: '#/components/responses/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message: 
          type: string
        status: 
          type: integer

  parameters:
    client_id:
      name: client_id
      description: The client_id is the identifier for your app. You will have received a client_id when first registering your app with the service.
      in: query
      required: true
      schema:
        type: string
    response_type:
      name: response_type
      description: response_type is set to code indicating that you want an authorization code as the response.
      in: query
      required: true
      schema:
        type: string
    redirect_uri:
      name: redirect_uri
      description: The redirect_uri may be optional depending on the API, but is highly recommended. This is the URL to which you want the user to be redirected after the authorization is complete. This must match the redirect URL that you have previously registered with the service.
      in: query
      required: true
      schema:
        type: string
    scope:
      name: scope
      description: Include one or more scope values (space-separated) to request additional levels of access. The values will depend on the particular service.
      in: query
      required: false
      schema:
        type: string
    state:
      name: state
      description: The state parameter serves two functions. When the user is redirected back to your app, whatever value you include as the state will also be included in the redirect. This gives your app a chance to persist data between the user being directed to the authorization server and back again, such as using the state parameter as a session key. This may be used to indicate what action in the app to perform after authorization is complete, for example, indicating which of your appâ€™s pages to redirect to after authorization.
The state parameter also serves as a CSRF protection mechanism if it contains a random value per request. When the user is redirected back to your app, double check that the state value matches what you set it to originally.
      in: query
      required: false
      schema:
        type: string
    code_challenge:
      name: code_challenge
      description: BASE64URL-ENCODE(SHA256(ASCII(code_verifier_))) where code_verifier = high-entropy cryptographic random STRING
      in: query
      required: false
      schema:
        type: string
    code_challenge_method:
      name: code_challenge_method
      description: Transformation method - plain or S256
      in: query
      required: false
      schema:
        type: string

  examples:
    bad_request:
      description: Bad Request
      value: {"code": "bad_request","message": "Bad Request","status": 400}

  responses:
    Health:
      description: Whether the service is healthy
      content:
          text/plain:
            schema:
              type: string
              example: ok
              
    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
             
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            bad_request:
              $ref: '#/components/examples/bad_request'